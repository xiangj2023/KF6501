/********************************************************************************************
*                                                                                  
*        版权所有(C) 天津凯发电气股份有限公司(KeyVia)                                    
*                                                                                  
********************************************************************************************/
                          
/********************************************************************************************
*                                                                                  
* 文件名称          
*			di.cpp                                                      
*                                                                                  
*                                                                                  
* 软件模块                                                                         
*           直流采集处理                                                                       
*			                                                                
* 描述                                                                             
*                                                                                  
*      直流采集处理，为简化处理，暂时只考虑温度测量，并且为PT100,温度范围为-100℃~210℃	                          
*      两路直流温度保存在AI库的开始位置，因此AI个数必须考虑温度路数，最小设置为2                                                                                  
*                                                                                  
* 函数                                                                             
*                                                                                  
*
* 修改历史                                                                         
*                                                                                  
*      修改人           修改日期     修改内容                                      
*                                                                                  
*      ZQZ               08/1/16    初始创建                         
*                                                                                  
********************************************************************************************/

#include "dai.h"
#include "dbfunc.h"

/*Pt100的温度表,表的范围为-100℃~400℃*/
const WORD Pt100[] = 
{
	6026,	6066,	6107,	6147,	6188,	6228,	6268,	6309,	6349,	6390,	//-100℃
	6430,	6470,	6511,	6551,	6591,	6631,	6672,	6712,	6752,	6792,	//-90℃
	6833,	6873,	6913,	6953,	6993,	7033,	7073,	7113,	7153,	7193,	//-80℃
	7233,	7273,	7313,	7353,	7393,	7433,	7473,	7513,	7553,	7593,	//-70℃
	7633,	7673,	7712,	7752,	7792,	7832,	7872,	7911,	7951,	7991,	//-60℃
	8031,	8070,	8110,	8150,	8189,	8229,	8269,	8308,	8348,	8387,	//-50℃
	8427,	8467,	8506,	8546,	8585,	8625,	8664,	8704,	8743,	8783,	//-40℃
	8822,	8862,	8901,	8940,	8980,	9019,	9059,	9098,	9137,	9177,	//-30℃
	9216,	9255,	9295,	9334,	9373,	9412,	9452,	9491,	9530,	9569,	//-20℃
	9609,	9648,	9687,	9726,	9765,	9804,	9844,	9883,	9922,	9961,	//-10℃
	10000,	10039,	10078,	10117,	10156,	10195,	10234,	10273,	10312,	10351,	//0℃
	10390,	10429,	10468,	10507,	10546,	10585,	10624,	10663,	10702,	10740,	//10℃
	10779,	10818,	10857,	10896,	10935,	10973,	11012,	11051,	11090,	11129,	//20℃
	11167,	11206,	11245,	11283,	11322,	11361,	11400,	11438,	11477,	11515,	//30℃
	11554,	11593,	11631,	11670,	11708,	11747,	11786,	11824,	11863,	11901,	//40℃
	11940,	11978,	12017,	12055,	12094,	12132,	12171,	12209,	12247,	12286,	//50℃
	12324,	12363,	12401,	12439,	12478,	12516,	12554,	12593,	12631,	12669,	//60℃
	12708,	12746,	12784,	12822,	12861,	12899,	12937,	12975,	13013,	13052,	//70℃
	13090,	13128,	13166,	13204,	13242,	13280,	13318,	13357,	13395,	13433,	//80℃
	13471,	13509,	13547,	13585,	13623,	13661,	13699,	13737,	13775,	13813,	//90℃
	13851,	13888,	13926,	13964,	14002,	14040,	14078,	14116,	14154,	14191,	//100℃	
	14229,	14267,	14305,	14343,	14380,	14418,	14456,	14494,	14531,	14569,	//110℃
	14607,	14644,	14682,	14720,	14757,	14795,	14833,	14870,	14908,	14946,	//120℃
	14983,	15021,	15058,	15096,	15133,	15171,	15208,	15246,	15283,	15321,	//130℃
	15358,	15396,	15433,	15471,	15508,	15546,	15583,	15620,	15658,	15695,	//140℃
	15733,	15770,	15807,	15845,	15882,	15919,	15956,	15994,	16031,	16068,	//150℃
	16105,	16143,	16180,	16217,	16254,	16291,	16329,	16366,	16403,	16440,	//160℃
	16477,	16514,	16551,	16589,	16626,	16663,	16700,	16737,	16774,	16811,	//170℃
	16848,	16885,	16922,	16959,	16996,	17033,	17070,	17107,	17143,	17180,	//180℃
	17217,	17254,	17291,	17328,	17365,	17402,	17438,	17475,	17512,	17549,	//190℃
	17586,	17622,	17659,	17696,	17733,	17769,	17806,	17843,	17879,	17916,	//200℃
	17953//,	17989,	18026,	18063,	18099	//210℃
};

TOldDAIValu OldRValue;	//上次采样数据

TDAIBuf DAIBuf;			//原始缓冲数据

void DAIInit()
{
	//默认最初温度为0℃
	OldRValue.wIndex = 100;	
	OldRValue.sdwTValue = 0;
	OldRValue.dwRVale = Pt100[OldRValue.wIndex];

	memset((void*)&DAIBuf, 0, sizeof(DAIBuf));

	//应该根据数据库初始化直流量个数
	DAIBuf.bDAINum = MAX_DAI_NUM
}

/*********************************************************************************************
 *
 * 功能描述     直流采集处理，读取原始电压信号后转换为电阻值，经滤波后查表计算出温度
 *
 * 参数说明      无
 *				 				 
 *				 
 *
 * 返回代码
 *                无
 *
 * 其它说明：          
 *
**********************************************************************************************/
void DAIProc()
{
	SDWORD tvalue;
	for(int i=0; i<DAIBuf.bDAINum; i++)
	{
		//从串行AD中读取温度对应的电阻值
		DAIBuf[i][DAIBuf.bWritePtr] = ReadRValue(i);
	}
	DAIBuf.bWritePtr++;

	//原始数据滤波处理，排序并取中间值作为有效数据
	if(DAIBuf.bWritePtr == DAI_BUF_LEN)
	{
		for(int i=0; i<DAIBuf.bDAINum; i++)
		{
			//对原始数据排序
			bubble_sort((int*)&DAIBuf[i][0], DAI_BUF_LEN);

			//取中间值作为有效数据进行温度计算
			tvalue = CalTemperatur(DAIBuf[i][1]);

			//写入数据库
			DB_WriteAI(i, tvalue);
		}

		//清除临时数据缓冲区
		memset((void*)&DAIBuf, 0, sizeof(DAIBuf));
	}
}

/*********************************************************************************************
 *
 * 功能描述     根据电阻值查表计算对应温度，根据温度连续变化的特性，本次阻值在上次阻值附近变化
 *				本次值与上次值进行比较，根据差确定查找方向，并快速定位，两℃之间按照线性处理
 *
 * 参数说明      - dwRvalue	: 输入 	电阻值
 *				 				 
 *				 
 *
 * 返回代码
 *                温度值(放大100倍)
 *
 * 其它说明：          
 *
**********************************************************************************************/
SDWORD CalTemperatur(DWORD dwRvalue)
{
	SDWORD temperatue;
	int i;

	//极限情况处理
	if(dwRvalue<=MIN_R_VALUE)
		return MIN_T_VALUE;
	else if(dwRvalue >= MAX_R_VALUE)
		return MAX_T_VALUE;
	else
	{
		//本次阻值与上次阻值相同，则采用上次温度值
		if(dwRvalue == OldRValue.dwRVale)
			return OldRValue.sdwTValue;
		if(dwRvalue > OldRValue.dwRVale)	//阻值变大，向下查找
		{
			for(i=0; ;i++, OldRValue.wIndex++)
			{
				if( (dwRvalue>=Pt100[OldRValue.wIndex])&&(dwRvalue<Pt100[OldRValue.wIndex+1]) )
					break;
			}
		}
		else (dwRvalue < OldRValue.dwRVale)	//阻值变小，向上查找
		{
			for(i=0; ;i++, OldRValue.wIndex--)
			{
				if( (dwRvalue>=Pt100[OldRValue.wIndex])&&(dwRvalue<Pt100[OldRValue.wIndex+1]) )
					break;
			}
		}

		//温度计算
		temperatue = (dwRvalue-Pt100[OldRValue.wIndex])*100/(Pt100[OldRValue.wIndex+1]-\
			Pt100[OldRValue.wIndex]) + OldRValue.wIndex*100;
		temperatue -= MIN_T_VALUE;
		OldRValue.sdwTValue = temperatue;
		OldRValue.dwRVale = dwRvalue;
		return temperatue;
	}
	
}


//冒泡排序
void bubble_sort(int *x, int n)
{
	int j, k, h, t;
  
 	for (h=n-1; h>0; h=k) /*循环到没有比较范围*/
 	{
  		for (j=0, k=0; j<h; j++) /*每次预置k=0，循环扫描后更新k*/
  		{
   			if (*(x+j) > *(x+j+1)) /*大的放在后面，小的放到前面*/
   			{
    			t = *(x+j);
    			*(x+j) = *(x+j+1);
    			*(x+j+1) = t; /*完成交换*/
    			k = j; /*保存最后下沉的位置。这样k后面的都是排序排好了的。*/
   			}
  		}
 	}
}

//取温度对应电阻值，由于从AD读取的数据为电压值，需要根据校准系数转换为电阻值
DWORD ReadRValue(BYTE index)
{
	return 0;
}

