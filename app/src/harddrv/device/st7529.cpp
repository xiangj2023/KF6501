/********************************************************************************************
*                                                                                  
*        版权所有(C) 天津凯发电气股份有限公司(KeyVia)                                    
*                                                                                  
********************************************************************************************/
                          
/********************************************************************************************
*                                                                                  
* 文件名称          
*			st7529.cpp                                                      
*                                                                                  
*                                                                                  
* 软件模块                                                                         
*           液晶控制器st7529驱动                                                                      
*			                                                                
* 描述                                                                             
*                                                                                  
*      本系统采用240X160点阵的液晶，8位接口，单色显示。由于控制器支持32级灰度调节，为方便操作
*      显示缓冲区采用每个字节保存象素信息，3B3P操作方式。注意X和Y方向的位置坐标都从0开始。为
*      简化操作，只考虑单色情况，因此对上接口函数不套用UCGUI的标准。                                                                                  
*                                                                                        
* 函数                                                                             
*                                                                                  
*      	St7529SetAdd		设置操作数据地址空间
*		St7529SetWrite		设置操作数据地址空间，然后发送允许写操作命令
*		St7529ReadEeprom	用来读取eeprom中的电压设置值
*		St7529WriteEeprom	将调整好的电压值保存到eeprom
*		St7529Init			液晶控制器st7529初始化
*		St7529SetPixel		画点函数，只考虑单色情况
*		St7529GetPixel		取象素点信息，仅考虑单色情况
*		St7529DrawHLine		画(擦除)横线操作
*		St7529DrawVLine		画(擦除)竖线操作
*		St7529FillRect		填充(擦除)矩形框
*		St7529DrawRect		画矩形边框
*		St7529DrawBitLine1BPP	根据象素点信息，进行单行横线扫描显示
*		St7529DramBitMap	单色位图块扫描显示
*		
* 修改历史                                                                         
*                                                                                  
*      修改人           修改日期     修改内容                                      
*                                                                                  
*      ZQZ               08/10/13    初始创建                         
*                                                                                  
********************************************************************************************/
#include "st7529.h"
#include "resm5234.h"
#include "daefunc.h"

#if(LCD_CONTRLER == LCD_ST7529)

//控制器显示缓存，避免直接操作控制器的内部显存。
BYTE bSt7529Ram[LCD_YSIZE][LCD_XSIZE];

WORD ContrastLevel;

void St7529WriteCmd(BYTE cmd)
{
	BYTE temp;
	outportb(LCD_CMD_REG, cmd);
//	temp = inportb(LCD_CMD_REG);
}
	
void St7529WriteDat(BYTE dat)
{
	BYTE temp;
	outportb(LCD_DATA_REG, dat);
//	temp = inportb(LCD_CMD_REG);
}

/*********************************************************************************************
 *
 * 功能描述     设置操作数据地址空间，只有操作空间内的数据，并且从空间的起始位置开始操作，
 *				每操作一次内部操作指针自动向后移动一个象素，移动的方向由数据扫描方向的定义而定，
 *				当操作到空间中的最后一个象素时，会自动移动到开始位置。
 *
 * 参数说明      - x1		: 输入 	起始横坐标位置，从0开始
 *				 - y1		: 输入	起始纵坐标位置，从0开始
 *				 - x2		: 输入	结束横坐标位置
 *				 - y2		: 输入	结束纵坐标位置
 *
 * 返回代码
 *                成功或失败
 *
 * 其它说明：          
 *
**********************************************************************************************/
DWORD St7529SetAdd(WORD x1, WORD y1, WORD x2, WORD y2)
{
	//参数检查
	ASSERT(x1<LCD_XSIZE);
	ASSERT(x2<LCD_XSIZE);
	ASSERT(y1<LCD_YSIZE);
	ASSERT(y2<LCD_YSIZE);

	if( (x1>=LCD_XSIZE) || (x2>=LCD_XSIZE) || (y1>=LCD_YSIZE) || (y2>=LCD_YSIZE) )
	{
        LogError("St7529SetAdd",FILE_LINE,"the display area para invalide.");
		return ERR_FAILURE;	
	}

	//首先设置线范围，即y方向范围
	St7529WriteCmd(LASET);		
	St7529WriteDat(y1);			//起始线
	St7529WriteDat(y2);			//结束线

	//设置栏范围，即x方向范围。由于x方向操作单位为栏(column,每连续3个象素为1栏)，因此必须调整
	St7529WriteCmd(CASET);		
	St7529WriteDat(x1/ST7529_COLUMN);		//起始栏
	St7529WriteDat(x2/ST7529_COLUMN);		//结束栏
	
	return ERR_SUCCESS;
}

/*********************************************************************************************
 *
 * 功能描述     设置操作数据地址空间，然后发送允许写操作命令，此后就可以写入连续数据
 *
 * 参数说明      - x1		: 输入 	起始横坐标位置，从0开始
 *				 - y1		: 输入	起始纵坐标位置，从0开始
 *				 - x2		: 输入	结束横坐标位置
 *				 - y2		: 输入	结束纵坐标位置
 *
 * 返回代码
 *               成功或失败 
 *
 * 其它说明：          
 *
**********************************************************************************************/
DWORD St7529SetWrite(WORD x1, WORD y1, WORD x2, WORD y2)
{
	//首先设置操作地址
	if(St7529SetAdd(x1, y1, x2, y2) == ERR_FAILURE)
		return ERR_FAILURE;

	//然后发送允许写命令
	St7529WriteCmd(RAMWR);
	return ERR_SUCCESS;
}

/*********************************************************************************************
 *
 * 功能描述     用来读取eeprom中的电压设置值，这样可以在此基础上调整电压，并通过写eeprom将
 *				该数据保存到eeprom中，这样每次上电后从eeprom中读取电压值，从而确保背光不丢失
 *
 * 参数说明      无
 *
 * 返回代码
 *               无
 *
 * 其它说明：          
 *
**********************************************************************************************/
void St7529ReadEeprom(void)
{
	St7529WriteCmd(ExtIn);		//Ext=0，进入基本命令方式
	St7529WriteCmd(EPINT);		//initial code(1)
	St7529WriteDat(0x19);		

	St7529WriteCmd(ExtOut);		//Ext=1，进入扩展命令方式
	St7529WriteCmd(EPCTIN);		//进入EEPROM操作
	St7529WriteDat(0x00);		//进入读模式

	OS_Sleep(100);

	St7529WriteCmd(EPMRD);		//开始eeprom读操作
	OS_Sleep(100);				//等待操作

	St7529WriteCmd(EPCOUT);		//退出eeprom操作
	
	St7529WriteCmd(ExtIn);		//Ext=0，进入基本命令方式
}

/*********************************************************************************************
 *
 * 功能描述     将调整好的电压值保存到eeprom，这样下次上电后直接从eeprom中读取该值即可以保证
 *				背光不丢失。当背光调节好后再调用本接口完成保存。
 *
 * 参数说明      无
 *
 * 返回代码
 *               无
 *
 * 其它说明：          
 *
**********************************************************************************************/
void St7529WriteEeprom(void)
{
	St7529WriteCmd(ExtIn);		//Ext=0，进入基本命令方式
	St7529WriteCmd(DISOFF);		//关闭显示
	St7529WriteCmd(EPINT);		//initial code(1)
	St7529WriteDat(0x19);		
	
	St7529WriteCmd(ExtOut);		//Ext=1，进入扩展命令方式
	St7529WriteCmd(EPCTIN);		//进入EEPROM操作
	St7529WriteDat(0x20);		//进入写模式

	OS_Sleep(100);
	
	St7529WriteCmd(EPMWR);		//开始eeprom写操作
	OS_Sleep(100);				//等待操作

	St7529WriteCmd(EPCOUT); 	//退出eeprom操作

	St7529WriteCmd(ExtIn);		//Ext=0，进入基本命令方式

	St7529WriteCmd(DISON); 		//打开显示
}

/*********************************************************************************************
 *
 * 功能描述     液晶控制器st7529初始化
 *
 * 参数说明      无
 *
 * 返回代码
 *               无
 *
 * 其它说明：          
 *
**********************************************************************************************/
void St7529Init(void)
{
	St7529Reset();
	
	//如果需要，在此初始化DISCTRL,缺省2分频，占空比1/4
	//如果需要，在此设置COM扫描方向，缺省为COM0->COM79,COM80->COM159
	
	St7529WriteCmd(ExtIn);		//Ext=0，进入基本命令方式
	St7529WriteCmd(SLPOUT);		//退出睡眠
	St7529WriteCmd(OSCON);		//内部晶振打开

	St7529WriteCmd(PWRCTRL);	//电源控制，VR、VF、VB全部打开
	St7529WriteDat(0x08);		
	OS_Sleep(10);
	St7529WriteCmd(PWRCTRL);
	St7529WriteDat(0x0b);		

	WORD value[2];
	if(EEPROM_Read(EEPROM_SYSPARA_LCDCTLPAR, 4, value)!= ERR_SUCCESS)
	{
		ReportMsg("EEPROM_Read read lcd para error.");
		value[0] = 0x100;
		value[1] = (~value[0]);
		EEPROM_Write(EEPROM_SYSPARA_LCDCTLPAR, 4, value);
	}
	else
	{
		if( ((value[0]&value[1]) != 0) || ((value[0]|value[1]) != 0xffff) )
		{
			ReportMsg("the lcd para invalid.");
			value[0] = 0x100;
			value[1] = (~value[0]);
			EEPROM_Write(EEPROM_SYSPARA_LCDCTLPAR, 4, value);
		}
	}
	//ReportMsg("the EEPROM_SYSPARA_LCDCTLPAR value = 0x%x. ",value[0]);
	
	St7529WriteCmd(VOLCTRL);	//电压控制,调整为10v，3.6+0.04*0xa0=10
	St7529WriteDat(value[0]&0x3f);
	St7529WriteDat((value[0]>>6)&0x7);
	ContrastLevel=0x00ED;	// contrast level is a 9bit value

	St7529WriteCmd(DISCTRL);	//显示控制，
	St7529WriteDat(0x04);		//不分频
	St7529WriteDat(LCD_YSIZE/ST7529_BLOCK-1);		//设置显示块个数:y/4-1,即160/4-1=39
	St7529WriteDat(0x00);

	St7529WriteCmd(DISNOR);		//设置正常显示

	St7529WriteCmd(COMSCN);		//设置COM扫描方向为:com0->com79,com80->com159
	St7529WriteDat(0x01);		

	St7529WriteCmd(DATSDR);		//设置数据扫描方向
	St7529WriteDat(0x01);		//左上角为原点
	St7529WriteDat(0x00);		
	St7529WriteDat(0x02);		// 3B3P方式

	St7529WriteCmd(LASET);		//设置线范围即y范围，0~159
	St7529WriteDat(0x00);
	St7529WriteDat(LCD_YSIZE-1);

	St7529WriteCmd(CASET);		//设置栏范围即x/3，0~79
	St7529WriteDat(0x00);
	St7529WriteDat(LCD_XSIZE/ST7529_COLUMN-1);

	St7529WriteCmd(ExtOut);

	St7529WriteCmd(ANASET);		//
	St7529WriteDat(0x05);
	St7529WriteDat(0x00);
	St7529WriteDat(0x02);

//	St7529WriteCmd(SWINT);		//软件初始化

//	St7529ReadEeprom();

	St7529WriteCmd(ExtIn);

	St7529WriteCmd(DISON);		//打开显示

	//清除外部显示缓存
	St7529WriteCmd(RAMWR);
	for(int i=0; i<LCD_YSIZE; i++)
	{
		for(int j=0; j<LCD_XSIZE; j++)
		{
			bSt7529Ram[i][j] = GRAY_WHITE; 
			St7529WriteDat(bSt7529Ram[i][j]);
		}
	}
	
}

/*********************************************************************************************
 *
 * 功能描述     画点函数，只考虑单色情况。由于最小操作单位为栏，因此当写入一个象素点信息后
 *				必须刷新对应栏中的连续3个象素点数据
 *
 * 参数说明      - x		: 输入 	象素点横坐标位置，从0开始
 *				 - y		: 输入	象素点纵坐标位置，从0开始
 *				 - pixel	: 输入	象素点信息，由于单色，因此最低位为有效信息
 *
 * 返回代码
 *               无
 *
 * 其它说明：          
 *
**********************************************************************************************/
void St7529SetPixel(int x, int y, LCD_PIXELINDEX pixel)
{
	int ColumnX;	
	//根据本控制器的要求，将一个象素的单色值转换为32级灰度值，并保存到对应临时显存中,
	//最低位为有效信息
	bSt7529Ram[y][x] = ( ((pixel&0x01)==LCD_BLACK) ? GRAY_BLACK : GRAY_WHITE );

	//由于本控制器在x方向上最小控制单位为栏，因此需要根据象素x坐标确定对应的栏数，并刷新
	//该栏对应的3个字节的数据
	ColumnX = x/ST7529_COLUMN*ST7529_COLUMN;

	//指定写入空间，并写入对应栏中的连续3个象素信息。
	St7529SetWrite(x, y, x, y+1);
	for(int i=0; i<ST7529_COLUMN; i++)
		St7529WriteDat(bSt7529Ram[y][ColumnX+i]);
}

/*********************************************************************************************
 *
 * 功能描述     取象素点信息，仅考虑单色情况
 *
 * 参数说明      - x		: 输入 	象素点横坐标位置，从0开始
 *				 - y		: 输入	象素点纵坐标位置，从0开始
 *
 * 返回代码
 *               单个象素点的单色信息
 *
 * 其它说明：          
 *
**********************************************************************************************/
LCD_PIXELINDEX St7529GetPixel(int x, int y)
{
	LCD_PIXELINDEX pixel;
	
	//将带灰度值转换为单色值
	pixel = ((bSt7529Ram[y][x]==GRAY_BLACK) ? LCD_BLACK : LCD_WHITE);

	return pixel;
}

/*********************************************************************************************
 *
 * 功能描述     画(擦除)横线操作
 *				
 * 参数说明      - x0		: 输入 	横线起始点x坐标
 *				 - y0		: 输入	横线起始点y坐标
 *				 - x1		: 输入	横线结束点x坐标
 *				 - isclear	: 输入	是否为擦除操作
 *
 * 返回代码
 *               无
 *
 * 其它说明：          
 *
**********************************************************************************************/
////测试画在一个栏中的短线情况
void St7529DrawHLine(int x0, int y0, int x1, BOOL isClear)
{
	int i, StartX, EndX;

	//根据是画线还是擦除线来修改对应外部显存
	for(i=x0; i<=x1; i++)
		bSt7529Ram[y0][i] = ( (isClear == FALSE) ? GRAY_BLACK : GRAY_WHITE);

	//设置刷新空间
	St7529SetWrite(x0, y0, x1, y0);

	//调整为整栏的x地址
	StartX = x0/ST7529_COLUMN*ST7529_COLUMN;
	EndX = (x1+ST7529_COLUMN)/ST7529_COLUMN*ST7529_COLUMN;

	//刷新整栏的数据
	for(i=StartX; i<EndX; i++)
	{
		St7529WriteDat(bSt7529Ram[y0][i]);
	}
}


/*********************************************************************************************
 *
 * 功能描述     画(擦除)竖线操作
 *
 * 参数说明      - x0		: 输入 	横线起始点x坐标
 *				 - y0		: 输入	横线起始点y坐标
 *				 - x1		: 输入	横线结束点y坐标
 *				 - isclear	: 输入	是否为擦除操作
 *
 * 返回代码
 *               无
 *
 * 其它说明：          
 *
**********************************************************************************************/
void St7529DrawVLine(int x0, int y0, int y1, BOOL isClear)
{
	for(int i=y0; i<=y1; i++)
	{
		St7529SetPixel(x0, i, LCD_BLACK);
	}
/*	
	int i, j,StartX;

	//根据是画线还是擦除线来修改对应外部显存
	for(i=y0; i<=y1; i++)
		bSt7529Ram[i][x0] = ( (isClear == FALSE) ? GRAY_BLACK : GRAY_WHITE);

	//设置刷新空间
	St7529SetWrite(x0, y0, x0, y1);

	//调整为整栏的x地址
	StartX = x0/ST7529_COLUMN*ST7529_COLUMN;

	for(i=y0; i<=y1; i++)		//刷新多行数据
	{
		for(j=0; j<ST7529_COLUMN; j++)	//刷新单行象素点所处的整栏数据
		{
			St7529WriteDat(bSt7529Ram[i][StartX+j]);
//			St7529WriteDat(bSt7529Ram[i][StartX+ST7529_COLUMN+j]);
		}
	}
*/	
}

/*********************************************************************************************
 *
 * 功能描述     填充(擦除)矩形框
 *
 * 参数说明      - x0		: 输入 	矩形框起始点x坐标
 *				 - y0		: 输入	矩形框起始点y坐标
 *				 - x1		: 输入	矩形框起始点的对角线点的x坐标
 *				 - y1		: 输入	矩形框起始点的对角线点的y坐标
 *				 - isclear	: 输入	是否为擦除操作
 *
 * 返回代码
 *               无
 *
 * 其它说明：          
 *
**********************************************************************************************/
//此函数可以通过减少操作控制器方式进行优化，即将全部数据写入到外部显存后再连续写入控制器的GRAM
void St7529FillRect(int x0, int y0, int x1, int y1, BOOL isClear)
{
	//通过连续画横线操作完成矩形框的填充或擦除操作
	for(int i=y0; i<=y1; i++)
		St7529DrawHLine(x0, i, x1, isClear);
}

/*********************************************************************************************
 *
 * 功能描述     画矩形边框
 *
 * 参数说明      - x0		: 输入 	矩形框起始点x坐标
 *				 - y0		: 输入	矩形框起始点y坐标
 *				 - x1		: 输入	矩形框起始点的对角线点的x坐标
 *				 - y1		: 输入	矩形框起始点的对角线点的y坐标
 *
 * 返回代码
 *               无
 *
 * 其它说明：          
 *
**********************************************************************************************/
void St7529DrawRect(int x0, int y0, int x1, int y1)
{
	//画矩形的横线
	St7529DrawHLine(x0, y0, x1, FALSE);
	St7529DrawHLine(x0, y1, x1, FALSE);

	//画矩形的竖线
	St7529DrawVLine(x0, y0, y1, FALSE);
	St7529DrawVLine(x1, y0, y1, FALSE);
}

/*********************************************************************************************
 *
 * 功能描述     根据象素点信息，进行单行横线扫描显示,每个象素点用1位表示
 *				
 * 参数说明      - x0		: 输入 	横线起始点x坐标
 *				 - y0		: 输入	横线起始点y坐标
 *				 - x1		: 输入	横线长度
 *				 - pData	: 输入	横线象素点信息，单色，每位代表一个象素点
 *
 * 返回代码
 *               无
 *
 * 其它说明：          
 *
**********************************************************************************************/
void St7529DrawBitLine1BPP(int x, int y, int xsize, BYTE *pData)
{
	int i, StartX, EndX;
	BYTE offset;

	//将字节数据缓存中的数据按照位保存到外部显存中，注意字节的从高到低对应x方向的从低到高
	for(i=0; i<xsize; i++)
	{
		//注意数据扫描方向为从字节高位到低位
		offset = (BYTE_BIT_LEN-1)-i%BYTE_BIT_LEN;
		
		bSt7529Ram[y][x+i] = ( (((pData[i/BYTE_BIT_LEN]>>offset)&0x01) == LCD_BLACK) ? GRAY_BLACK\
									: GRAY_WHITE );
	}

	//设置显示空间
	St7529SetWrite(x, y, x+xsize-1, y);

	//调整为整栏的x地址
	StartX = x/ST7529_COLUMN*ST7529_COLUMN;
	EndX = (x+xsize)/ST7529_COLUMN*ST7529_COLUMN;

	//刷新整栏的数据
	for(i=StartX; i<EndX; i++)
		St7529WriteDat(bSt7529Ram[y][i]);
}

/*********************************************************************************************
 *
 * 功能描述     单色位图块扫描显示
 *
 * 参数说明      - x0		: 输入 	位图块起始点x坐标
 *				 - y0		: 输入	位图块起始点y坐标
 *				 - xsize	: 输入	位图块x方向象素点数
 *				 - xsize	: 输入	位图块y方向象素点数
 *				 - pData	: 输入	位图块象素点信息数据
 *
 * 返回代码
 *               无
 *
 * 其它说明：          
 *
**********************************************************************************************/
void St7529DramBitMap(int x, int y, int xsize, int ysize, BYTE *pData)
{
	BYTE *pLineData, len;

	//计算每行象素点所占用的字节数
	len = (xsize + BYTE_BIT_LEN - 1)/BYTE_BIT_LEN;

	pLineData = pData;

	//顺序扫描位图中的每一行数据
	for(int i=0; i<ysize; i++)
	{
		St7529DrawBitLine1BPP(x, y+i, xsize, pLineData);
		pLineData += len;
	}
}

/*********************************************************************************************
 *
 * 功能描述     液晶复位控制，包括复位、撤销复位及打开背光等完整操作控制过程
 *
 * 参数说明      无
 *
 * 返回代码
 *               无
 *
 * 其它说明：          
 *
**********************************************************************************************/
void St7529Reset()
{
	St7529HReset();
	OS_Sleep(500);
	outportb(LCD_RESET_ADDR, 0x50);		//撤销液晶复位
	St7529BackLightOn();
	OS_Sleep(500);
}
/**************************************************************************************
	液晶测试程序开始
**************************************************************************************/
#undef DEBUG_LCD
#ifdef DEBUG_LCD
extern void LcdInit(void);
extern void LcdDraw();

char LOGO1[]={
/*-- TOPWAY LOGO --*/
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x50,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x2A,0xA8,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x05,0x55,0x41,0xF8,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0x80,0x00,0x00,0x00,0x00,0xAA,0xAA,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,
0x00,0x00,0x15,0x55,0x50,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x02,
0xAA,0xAA,0xA3,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x05,0x55,0x55,0x55,
0x0F,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x02,0xAA,0xAA,0xAA,0xAA,0x3F,0xFF,
0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x55,0x54,0xFF,0xFF,0xF8,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x2A,0xA1,0xFF,0xFF,0xF8,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x80,0x00,0x00,0x00,0x55,0x47,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0x80,0x00,0x00,0x00,0xAA,0x9F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,
0x00,0x00,0x55,0x3F,0xFF,0xFF,0xF8,0x01,0x00,0x04,0x20,0x48,0x80,0x84,0x10,0x40,
0x01,0x00,0x90,0x04,0x03,0xBF,0x02,0x40,0x00,0x40,0x00,0x01,0x80,0x00,0x00,0x00,
0xAA,0x7F,0xFF,0xFF,0xF8,0x01,0x3F,0x82,0x40,0xAA,0x87,0x04,0x10,0x40,0xFF,0x84,
0x88,0x04,0x22,0xA1,0x02,0x40,0xFF,0xE0,0x00,0x01,0x80,0x00,0x00,0x01,0x54,0xFF,
0xFF,0xFF,0xF8,0x01,0x08,0x1F,0xFD,0x2A,0x81,0x24,0x10,0x40,0x22,0x08,0x80,0xFF,
0xF2,0xA1,0x04,0x20,0x00,0x40,0x00,0x01,0x80,0x00,0x00,0x02,0xA9,0xFF,0xFF,0xFF,
0xF8,0x07,0xC8,0x12,0x48,0x3E,0xE1,0x14,0x7B,0xF8,0x22,0x0F,0xFE,0x08,0x02,0xBF,
0x04,0x21,0xFF,0x40,0x00,0x01,0x80,0x00,0x00,0x01,0x53,0xFF,0xFF,0xFF,0xF8,0x01,
0x10,0x0A,0x50,0x41,0x4F,0xC4,0x10,0x40,0x22,0x01,0x00,0x1F,0xC3,0x21,0x08,0x10,
0x00,0x40,0x00,0x01,0x80,0x00,0x00,0x02,0xA7,0xFF,0xFF,0xFF,0xF8,0x01,0x50,0x3F,
0xFC,0xBF,0x41,0x24,0x19,0xF1,0xFF,0xC1,0xF8,0x30,0x42,0xBF,0x11,0x08,0x7C,0x40,
0x00,0x01,0x80,0x00,0x00,0x05,0x4F,0xFF,0xFF,0xFF,0xF8,0x01,0xBF,0x00,0x01,0x81,
0x43,0x94,0x31,0x10,0x22,0x01,0x08,0x5F,0xC2,0xA9,0x21,0x04,0x44,0x40,0x00,0x01,
0x80,0x00,0x00,0x0A,0x9F,0xFF,0xFF,0xFF,0xF8,0x07,0x51,0x07,0xF0,0x9D,0x45,0x47,
0x51,0x10,0x22,0x02,0x88,0x90,0x42,0xAA,0x02,0x00,0x44,0x40,0x00,0x01,0x80,0x00,
0x00,0x05,0x3F,0xFF,0xFF,0xFF,0xF8,0x01,0x11,0x04,0x10,0x94,0x89,0x7C,0x10,0xA0,
0x22,0x02,0x50,0x1F,0xC3,0xA4,0x02,0x40,0x7C,0x40,0x00,0x01,0x80,0x00,0x00,0x0A,
0x7F,0xFF,0xFF,0xFF,0xF8,0x01,0x11,0x07,0xF0,0x96,0x81,0x04,0x10,0x40,0x42,0x04,
0x20,0x10,0x42,0x22,0x04,0x20,0x44,0x40,0x00,0x01,0x80,0x00,0x00,0x14,0xFF,0xFF,
0xFF,0xFF,0xF8,0x01,0x1F,0x04,0x10,0xA5,0x41,0x04,0x10,0xA0,0x82,0x08,0xD8,0x10,
0x42,0x29,0x0F,0xF0,0x01,0x40,0x00,0x01,0x80,0x00,0x00,0x29,0xFF,0xFF,0xFF,0xFF,
0xF8,0x03,0x11,0x07,0xF0,0xC2,0x21,0x04,0x37,0x19,0x02,0x13,0x06,0x10,0xC2,0x30,
0x84,0x10,0x00,0x80,0x00,0x01,0x80,0x00,0x00,0x13,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x23,0xFF,0xFF,0xFF,0xFF,0xF8,0x07,0xCE,0x79,
0x11,0x11,0x01,0xF0,0x00,0x40,0x00,0x0C,0x00,0x00,0x00,0x38,0x00,0x10,0x20,0x20,
0x00,0x01,0x80,0x00,0x00,0x47,0x06,0x30,0xDD,0xDD,0xD8,0x01,0x11,0x45,0x12,0x91,
0x00,0x40,0x00,0x40,0x00,0x04,0x00,0x00,0x00,0x44,0x00,0x10,0x20,0x20,0x00,0x01,
0x80,0x00,0x00,0x2F,0xDD,0xD7,0x5D,0xAE,0xB8,0x01,0x11,0x45,0x14,0x4A,0x00,0x43,
0x8F,0x41,0x63,0x84,0x38,0xF4,0x40,0x40,0xE0,0x10,0xF9,0xE0,0x00,0x01,0x80,0x00,
0x00,0x4F,0xDD,0xD0,0xD5,0x07,0x78,0x01,0x11,0x79,0x57,0xC4,0x00,0x44,0x50,0x59,
0x94,0x44,0x45,0x14,0x40,0x41,0x10,0x10,0x22,0x20,0x00,0x01,0x80,0x00,0x00,0x9F,
0xDE,0x37,0xEB,0x77,0x78,0x01,0x11,0x41,0x54,0x44,0x00,0x47,0xD0,0x65,0x14,0x44,
0x44,0xF3,0xC0,0x41,0x10,0x10,0x22,0x20,0x00,0x01,0x80,0x00,0x01,0x3F,0xFF,0xFF,
0xFF,0xFF,0xF8,0x01,0x11,0x41,0x54,0x44,0x00,0x44,0x10,0x45,0x14,0x44,0x44,0x10,
0x40,0x45,0x10,0x10,0x22,0x20,0x00,0x01,0x80,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,
0xF8,0x01,0x0E,0x40,0xA4,0x44,0x00,0x43,0x8F,0x45,0x13,0x8E,0x38,0xE3,0x80,0x38,
0xE2,0x1E,0x19,0xE4,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,
0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFE,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x01,
0x81,0x87,0xE0,0x06,0x07,0xE0,0x18,0x07,0xE0,0x7E,0x1F,0x80,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x01,0x81,0x87,
0xE0,0x06,0x07,0xE0,0x18,0x07,0xE0,0x7E,0x1F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x01,0xE7,0x98,0x18,0x1E,
0x18,0x18,0x78,0x18,0x19,0x81,0x98,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x01,0xE7,0x98,0x18,0x1E,0x18,0x18,
0x78,0x18,0x19,0x81,0x98,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x01,0x99,0x80,0x18,0x66,0x18,0x78,0x18,0x18,
0x01,0x87,0x98,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x18,0x01,0x99,0x80,0x18,0x66,0x18,0x78,0x18,0x18,0x01,0x87,
0x98,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x18,0x01,0x99,0x80,0x61,0x86,0x19,0x98,0x18,0x1F,0xE1,0x99,0x98,0x18,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x18,0x01,0x99,0x80,0x61,0x86,0x19,0x98,0x18,0x1F,0xE1,0x99,0x98,0x18,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x01,
0x81,0x81,0x81,0xFF,0x9E,0x18,0x18,0x18,0x19,0xE1,0x98,0x18,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x01,0x81,0x81,
0x81,0xFF,0x9E,0x18,0x18,0x18,0x19,0xE1,0x98,0x18,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x01,0x81,0x86,0x00,0x06,
0x18,0x18,0x18,0x18,0x19,0x81,0x98,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x01,0x81,0x86,0x00,0x06,0x18,0x18,
0x18,0x18,0x19,0x81,0x98,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xF9,0x81,0x9F,0xF8,0x06,0x07,0xE0,0x7E,0x07,
0xE0,0x7E,0x1F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x1F,0xF9,0x81,0x9F,0xF8,0x06,0x07,0xE0,0x7E,0x07,0xE0,0x7E,
0x1F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x7F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x40,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x80,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x02,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,
0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xC1,0x1C,0x00,0x87,
0x1C,0x03,0xC2,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x23,0x22,0x01,0x88,0xA2,0x02,
0x20,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x25,0x26,0x88,0x88,0x26,0x02,0x26,0x22,
0x70,0x87,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x2A,0x50,0x8F,0x2A,0x03,0xC2,0x14,0x88,0x88,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x8F,0xB2,0x20,0x88,0xB2,0x02,0x02,0x08,0xF8,0x87,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x01,0x22,0x50,0x88,0xA2,0x02,0x02,0x14,0x80,0x80,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
0xE1,0x1C,0x89,0xC7,0x1C,0x02,0x07,0x22,0x71,0xCF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x80,0x00,0xFE,0x0F,0xE0,0x00,0x3F,0xF8,0x00,0x00,0x00,0x00,0x00,0xFE,
0x00,0x00,0xFE,0x0F,0xC0,0x00,0xFE,0xFF,0xFF,0xFF,0xFE,0x00,0x07,0xC0,0x00,0x01,
0x80,0x00,0x82,0x08,0x20,0x00,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x81,0x00,0x01,
0x02,0x10,0x20,0x01,0x02,0x40,0x00,0x00,0x04,0x00,0x08,0x20,0x00,0x01,0x80,0x00,
0x82,0x08,0x20,0x00,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x02,0x02,0x27,
0x90,0x02,0x02,0x20,0x00,0x00,0x08,0x00,0x10,0x10,0x00,0x01,0x80,0x00,0x82,0x08,
0x20,0x00,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x04,0x02,0x48,0x48,0x04,
0x02,0x10,0x00,0x00,0x10,0x00,0x10,0x10,0x00,0x01,0x80,0x00,0x82,0x08,0x20,0x00,
0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x80,0x20,0x08,0x02,0x50,0x28,0x08,0x02,0x08,
0x00,0x00,0x20,0x00,0x10,0x10,0x00,0x01,0x80,0x7F,0x03,0xF0,0x3E,0x00,0x20,0x08,
0x00,0x00,0x00,0x00,0x00,0x80,0x10,0x10,0x02,0x50,0x28,0x10,0x02,0x04,0x00,0x00,
0x40,0x00,0x10,0x10,0x00,0x01,0x80,0x40,0x00,0x00,0x02,0x00,0x20,0x08,0x00,0x00,
0x00,0x00,0x00,0x80,0x08,0x20,0x02,0x50,0x28,0x20,0x02,0x02,0x00,0x00,0x80,0x00,
0x10,0x10,0x00,0x01,0x80,0x40,0x00,0x00,0x02,0x00,0x20,0x08,0x00,0x00,0x00,0x00,
0x00,0x40,0x04,0x40,0x04,0x50,0x28,0x40,0x04,0x01,0x00,0x01,0x00,0x00,0x08,0x20,
0x00,0x01,0x80,0x40,0x00,0x00,0x02,0x00,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x20,
0x02,0x80,0x08,0x48,0x48,0x80,0x08,0x00,0x80,0x02,0x00,0x00,0x07,0xC0,0x00,0x01,
0x80,0x40,0x00,0x00,0x02,0x00,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x10,0x01,0x00,
0x10,0x27,0x91,0x00,0x10,0x00,0x40,0x04,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x40,
0x00,0x00,0x02,0xFF,0xE0,0x0F,0xFE,0xFF,0xFF,0xFF,0xFE,0x08,0x00,0x00,0x20,0x10,
0x22,0x00,0x20,0x00,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x7F,0x03,0xF0,
0x3E,0x80,0x00,0x00,0x02,0x80,0x00,0x00,0x02,0x04,0x00,0x00,0x40,0x0F,0xC4,0x00,
0x40,0x00,0x10,0x10,0x00,0xFF,0xFF,0xFF,0xFE,0x01,0x80,0x01,0x04,0x10,0x40,0x80,
0x00,0x00,0x02,0x80,0x00,0x00,0x02,0x02,0x00,0x00,0x80,0x00,0x08,0x00,0x80,0x00,
0x08,0x20,0x00,0x80,0x00,0x00,0x02,0x01,0x80,0x01,0x04,0x10,0x40,0x80,0x00,0x00,
0x02,0x80,0x00,0x00,0x02,0x01,0x00,0x01,0x00,0x00,0x10,0x01,0x00,0x00,0x04,0x40,
0x00,0x80,0x00,0x00,0x02,0x01,0x80,0x01,0x04,0x10,0x40,0x80,0x00,0x00,0x02,0x80,
0x00,0x00,0x02,0x00,0x80,0x02,0x00,0x00,0x20,0x02,0x00,0x00,0x02,0x80,0x00,0x80,
0x00,0x00,0x02,0x01,0x80,0x01,0x04,0x10,0x40,0x80,0x00,0x00,0x02,0x80,0x00,0x00,
0x02,0x00,0x40,0x04,0x00,0x00,0x40,0x04,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,
0x02,0x01,0x80,0x01,0x04,0x10,0x40,0x80,0x00,0x00,0x02,0x80,0x00,0x00,0x02,0x00,
0x80,0x02,0x00,0x00,0x80,0x08,0x00,0x00,0x02,0x80,0x00,0x80,0x00,0x00,0x02,0x01,
0x80,0x01,0x04,0x10,0x40,0x80,0x00,0x00,0x02,0x80,0x00,0x00,0x02,0x01,0x00,0x01,
0x00,0x01,0x00,0x10,0x00,0x00,0x04,0x40,0x00,0x80,0x00,0x00,0x02,0x01,0x80,0xFE,
0x07,0xE0,0x7C,0x80,0x00,0x00,0x02,0x80,0x00,0x00,0x02,0x02,0x00,0x00,0x80,0x02,
0x00,0x23,0xF0,0x00,0x08,0x20,0x00,0x80,0x00,0x00,0x02,0x01,0x80,0x80,0x00,0x00,
0x04,0x80,0x00,0x00,0x02,0x80,0x00,0x00,0x02,0x04,0x00,0x00,0x40,0x04,0x00,0x44,
0x08,0x00,0x10,0x10,0x00,0xFF,0xFF,0xFF,0xFE,0x01,0x80,0x80,0x00,0x00,0x04,0xFF,
0xE0,0x0F,0xFE,0xFF,0xFF,0xFF,0xFE,0x08,0x00,0x00,0x20,0x08,0x00,0x89,0xE4,0x00,
0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x80,0x00,0x00,0x04,0x00,0x20,0x08,
0x00,0x00,0x00,0x00,0x00,0x10,0x01,0x00,0x10,0x10,0x01,0x12,0x12,0x00,0x40,0x04,
0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x80,0x00,0x00,0x04,0x00,0x20,0x08,0x00,0x00,
0x00,0x00,0x00,0x20,0x02,0x80,0x08,0x20,0x02,0x14,0x0A,0x00,0x80,0x02,0x00,0x00,
0x07,0xC0,0x00,0x01,0x80,0x80,0x00,0x00,0x04,0x00,0x20,0x08,0x00,0x00,0x00,0x00,
0x00,0x40,0x04,0x40,0x04,0x40,0x04,0x14,0x0A,0x01,0x00,0x01,0x00,0x00,0x08,0x20,
0x00,0x01,0x80,0xFC,0x0F,0xC0,0xFC,0x00,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x80,
0x08,0x20,0x02,0x80,0x08,0x14,0x0A,0x02,0x00,0x00,0x80,0x00,0x10,0x10,0x00,0x01,
0x80,0x04,0x10,0x41,0x00,0x00,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x80,0x10,0x10,
0x02,0x80,0x10,0x14,0x0A,0x04,0x00,0x00,0x40,0x00,0x10,0x10,0x00,0x01,0x80,0x04,
0x10,0x41,0x00,0x00,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x80,0x20,0x08,0x02,0x80,
0x20,0x12,0x12,0x08,0x00,0x00,0x20,0x00,0x10,0x10,0x00,0x01,0x80,0x04,0x10,0x41,
0x00,0x00,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x04,0x02,0x80,0x40,0x09,
0xE4,0x10,0x00,0x00,0x10,0x00,0x10,0x10,0x00,0x01,0x80,0x04,0x10,0x41,0x00,0x00,
0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x02,0x02,0x80,0x80,0x04,0x08,0x20,
0x00,0x00,0x08,0x00,0x10,0x10,0x00,0x01,0x80,0x04,0x10,0x41,0x00,0x00,0x20,0x08,
0x00,0x00,0x00,0x00,0x00,0x81,0x00,0x01,0x02,0x81,0x00,0x03,0xF0,0x40,0x00,0x00,
0x04,0x00,0x08,0x20,0x00,0x01,0x80,0x07,0xF0,0x7F,0x00,0x00,0x3F,0xF8,0x00,0x00,
0x00,0x00,0x00,0xFE,0x00,0x00,0xFE,0xFE,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFE,0x00,
0x07,0xC0,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x82,0x3C,0x73,0x8F,0xBE,0x72,0x27,0x1E,0x8A,0x08,0xA2,0x73,0xC7,0x3C,
0x73,0xE8,0xA2,0x8A,0x28,0xBE,0x02,0x00,0x02,0x00,0x60,0x20,0x20,0x44,0x18,0x01,
0x85,0x22,0x8A,0x48,0x20,0x8A,0x22,0x04,0x92,0x0D,0xA2,0x8A,0x28,0xA2,0x88,0x88,
0xA2,0x8A,0x28,0x82,0x02,0x00,0x02,0x00,0x80,0x20,0x00,0x04,0x08,0x01,0x88,0xA2,
0x82,0x28,0x20,0x82,0x22,0x04,0xA2,0x0A,0xB2,0x8A,0x28,0xA2,0x80,0x88,0xA2,0x89,
0x45,0x04,0x73,0xC7,0x9E,0x73,0xE7,0xA0,0x60,0xC4,0x88,0xD1,0x8F,0xBC,0x82,0x2F,
0x3C,0xBB,0xE2,0x04,0xC2,0x0A,0xAA,0x8B,0xC8,0xBC,0x70,0x88,0xA2,0xA8,0x82,0x08,
0x0A,0x28,0x22,0x88,0x88,0xAC,0x20,0x45,0x08,0xA9,0x88,0xA2,0x82,0x28,0x20,0x8A,
0x22,0x04,0xA2,0x08,0xA6,0x8A,0x0A,0xA8,0x08,0x88,0xA2,0xA9,0x42,0x10,0x7A,0x28,
0x22,0xF8,0x87,0xB2,0x20,0x46,0x08,0xA9,0x88,0xA2,0x8A,0x48,0x20,0x8A,0x22,0x24,
0x92,0x08,0xA2,0x8A,0x09,0x24,0x88,0x88,0x94,0xAA,0x22,0x20,0x8A,0x28,0x22,0x80,
0x80,0xA2,0x22,0x45,0x08,0xA9,0x88,0xBC,0x73,0x8F,0xA0,0x72,0x27,0x18,0x8B,0xE8,
0xA2,0x72,0x06,0xA2,0x70,0x87,0x08,0x52,0x22,0x3E,0x7B,0xC7,0x9E,0x70,0x87,0x22,
0x71,0x84,0x9C,0xA9,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x82,0x1C,0x70,0x4F,0x9C,0xF9,0xC7,0x1C,0x21,0xC7,0x04,0xF9,0xCF,0x9C,
0x71,0xC2,0x1C,0x70,0x4F,0x9C,0xF9,0xC7,0x1C,0x21,0xC7,0x04,0xF9,0xCF,0x9C,0x71,
0x86,0x22,0x88,0xC8,0x22,0x0A,0x28,0xA2,0x62,0x28,0x8C,0x82,0x20,0xA2,0x8A,0x26,
0x22,0x88,0xC8,0x22,0x0A,0x28,0xA2,0x62,0x28,0x8C,0x82,0x20,0xA2,0x89,0x82,0x02,
0x09,0x4F,0x20,0x12,0x28,0xA2,0x20,0x20,0x94,0xF2,0x01,0x22,0x8A,0x22,0x02,0x09,
0x4F,0x20,0x12,0x28,0xA2,0x20,0x20,0x94,0xF2,0x01,0x22,0x89,0x82,0x04,0x12,0x40,
0xBC,0x21,0xC7,0xA2,0x20,0x41,0x24,0x0B,0xC2,0x1C,0x7A,0x22,0x04,0x12,0x40,0xBC,
0x21,0xC7,0xA2,0x20,0x41,0x24,0x0B,0xC2,0x1C,0x79,0x82,0x08,0x0B,0xE0,0xA2,0x22,
0x20,0xA2,0x20,0x80,0xBE,0x0A,0x22,0x22,0x0A,0x22,0x08,0x0B,0xE0,0xA2,0x22,0x20,
0xA2,0x20,0x80,0xBE,0x0A,0x22,0x22,0x09,0x82,0x10,0x88,0x48,0xA2,0x22,0x28,0xA2,
0x21,0x08,0x84,0x8A,0x22,0x22,0x8A,0x22,0x10,0x88,0x48,0xA2,0x22,0x28,0xA2,0x21,
0x08,0x84,0x8A,0x22,0x22,0x89,0x87,0x3E,0x70,0x47,0x1C,0x21,0xC7,0x1C,0x73,0xE7,
0x04,0x71,0xC2,0x1C,0x71,0xC7,0x3E,0x70,0x47,0x1C,0x21,0xC7,0x1C,0x73,0xE7,0x04,
0x71,0xC2,0x1C,0x71,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
};

DWORD dwLcdCnt;

unsigned char keyvia[]=
{
/*------------------------------------------------------------------------------
;  源文件 / 文字: 
天津凯发电气有限公司
;  宽×高(像素) : 20×200
  ------------------------------------------------------------------------------*/
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
  0x00,0x04,0x00,0x00,0x0C,0x00,0x00,0x80,
  0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0x03,
  0x03,0x00,0x26,0xB2,0x00,0x8C,0xC0,0x00,
  0x80,0x00,0x30,0x00,0x00,0x60,0x07,0xE7,
  0xF8,0x00,0x10,0x00,0x7F,0xF8,0x08,0x60,
  0x03,0x9F,0xF0,0x36,0xBE,0x00,0xCD,0x80,
  0x3F,0xFE,0x00,0x7F,0xE0,0x3F,0xFF,0xF7,
  0x26,0x18,0x03,0x18,0x00,0xFF,0xF8,0x00,
  0x60,0x00,0xC3,0x30,0x3F,0xD2,0x00,0xCC,
  0x00,0x39,0x86,0x01,0xDF,0xC0,0x7C,0xC3,
  0xE3,0x66,0x30,0x0E,0x0E,0x04,0x00,0x18,
  0x0F,0xFF,0x80,0x3F,0xDE,0x00,0x12,0x01,
  0xFF,0xF0,0x31,0x86,0x07,0x10,0x00,0x01,
  0xC0,0x03,0xC7,0xD0,0x7C,0x03,0xC7,0xFF,
  0xF8,0x1F,0xFF,0x0E,0x1F,0xF0,0x7F,0x96,
  0x00,0xCC,0x80,0x3F,0xFE,0x00,0x7F,0xC0,
  0x03,0xFE,0x03,0x26,0x18,0x78,0xE1,0xE0,
  0x00,0x18,0x00,0xE0,0x07,0xD1,0x00,0x50,
  0x92,0x00,0x0F,0xC0,0x31,0x86,0x00,0xE0,
  0xC0,0x0E,0x86,0x03,0x37,0xF0,0x00,0xE0,
  0xC1,0xFF,0x98,0x00,0xD8,0x00,0x1F,0xF0,
  0x1F,0x92,0x00,0x1C,0x80,0x1F,0xFE,0x00,
  0x00,0x80,0xFC,0xFE,0x03,0x65,0x30,0x01,
  0x98,0x01,0x81,0x98,0x01,0x8C,0x00,0x41,
  0x00,0x10,0x32,0x00,0x73,0x80,0x1E,0x84,
  0x00,0x00,0x80,0x00,0x86,0x03,0xC4,0xE0,
  0x03,0x1C,0x00,0x81,0x98,0x07,0x87,0x01,
  0xFF,0xFC,0x11,0x33,0x17,0xE3,0xE0,0x00,
  0xC0,0x20,0x00,0xC0,0x01,0xFE,0x03,0x04,
  0x78,0x0E,0x0E,0x00,0xFF,0x18,0x7F,0x03,
  0xC3,0xA3,0x00,0x3E,0x63,0xE1,0x0E,0x7F,
  0x00,0xFF,0xE0,0x00,0xFE,0x03,0x86,0x03,
  0x07,0x9F,0x0F,0x1B,0x00,0x00,0x38,0x3C,
  0x01,0xE3,0x03,0x00,0x3D,0xC1,0xE0,0x38,
  0x1E,0x00,0x7F,0xC0,0x00,0x7E,0x07,0x06,
  0x03,0x0F,0x0E,0x01,0xF0,0x00,0x03,0xF8,
  0x00,0x00,0xC0,0x03,0x00,0x00,0x00,0xC0,
  0x00,0x0C,0x00,0x0F,0x80,0x00,0x18,0x00,
  0x06,0x00,0x04,0x00,0x00,0x00,0x00,0x01,
  0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00
	/*------------------------------------------------------------------------------
	;  源文件 / 文字: 
	天
	;  宽×高(像素) : 16×16
	  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	  0x0C,0x00,0x1B,0xF8,0x01,0x80,0x1F,0xF8,
	  0x01,0x80,0x03,0xC0,0x02,0x70,0x1E,0x38,
	  0x78,0x1F,0x00,0x06,0x00,0x00,0x00,0x00,
------------------------------------------------------------------------------*/
};


void LcdInit(void)
{
	dwLcdCnt = 0;
	St7529Init();
}

void LcdDraw()
{
	St7529DramBitMap(20, 70, 200, 20, (BYTE*)keyvia);
/*
	dwLcdCnt++;
	if(dwLcdCnt%2)
		St7529FillRect(1,2,238,158,FALSE);
	else
		St7529FillRect(1,2,238,158,TRUE);
*/		
		St7529DrawRect(1, 1, 238, 158);
/*
	BYTE status = 0;
	St7529LcdOff();
	St7529DisInv();
	OS_Sleep(50);
	St7529Nop();
	status = inportb(LCD_CMD_REG);
	
	status = 0;
	St7529LcdOn();
	St7529DisNor();
	OS_Sleep(50);
	St7529Nop();
	status = inportb(LCD_CMD_REG);

	status = 0;
	St7529Nop();
	status = inportb(LCD_CMD_REG);
*/	
/*	
	outport(LCD_RESET_ADDR, 0xa0);
	status = inportb(0xB0030000);
	outport(LCD_RESET_ADDR, 0xa0);
	status = inportb(0xB0030000);
	outport(LCD_RESET_ADDR, 0xa0);
	status = inportb(0xB0030000);
	outport(LCD_RESET_ADDR, 0xa0);
	status = inportb(0xB0030000);
	outport(LCD_RESET_ADDR, 0xa0);
	status = inportb(0xB0030000);
	outport(LCD_RESET_ADDR, 0xa0);
	outport(LCD_DATA_REG, 0x55);
	outport(LCD_DATA_REG, 0xaa);
	outport(LCD_CMD_REG, 0x55);
	outport(LCD_CMD_REG, 0xaa);
*/	
/*
		char TempData;
		char OutData;
		int i, j;
		char *DisplayData = LOGO1;

		St7529WriteCmd(DISNOR); 	//设置正常显示

		St7529WriteCmd(0x30);								// ext0 set of instruction

		St7529WriteCmd(0x15); 
		St7529WriteDat(0x00); 
		St7529WriteDat(0x4f);	// column address set start=0;end=(240/3)-1=0x4f

		St7529WriteCmd(0x75); 
		St7529WriteDat(0x00); 
		St7529WriteDat(159); 	// line address set start=0;end=159

		St7529WriteCmd(0x5c);								// RAMWR, wrriting to memory
		
		for(i=0;i<160;i++)
			{
			for(j=0;j<30;j++)						// each time process 8 dot
				{
				TempData=(*(DisplayData+(i*30)+j));
				OutData=0x00; if(TempData & 0x80){OutData=0xF8;} St7529WriteDat(OutData);
				OutData=0x00; if(TempData & 0x40){OutData=0xF8;} St7529WriteDat(OutData);
				OutData=0x00; if(TempData & 0x20){OutData=0xF8;} St7529WriteDat(OutData);
				OutData=0x00; if(TempData & 0x10){OutData=0xF8;} St7529WriteDat(OutData);
				OutData=0x00; if(TempData & 0x08){OutData=0xF8;} St7529WriteDat(OutData);
				OutData=0x00; if(TempData & 0x04){OutData=0xF8;} St7529WriteDat(OutData);
				OutData=0x00; if(TempData & 0x02){OutData=0xF8;} St7529WriteDat(OutData);
				OutData=0x00; if(TempData & 0x01){OutData=0xF8;} St7529WriteDat(OutData);
				}
			}
*/			
}

#endif
/**************************************************************************************
	液晶测试程序结束
**************************************************************************************/

#endif

