//包含基本数据类型定义

#ifndef __APPCORE_H
#define __APPCORE_H

#include "msgdefs.h"
#include "platform.h"

#define MAX_MSG_BUF_LEN		4096
/*----------------------------------------------------------------------------------------*/
/* 定义任务消息映射                                                                       */
/*----------------------------------------------------------------------------------------*/
#define DECLARE_MESSAGE_MAP() \
private: \
    static const AFX_MSGMAP_ENTRY _messageEntries[]; \
protected: \
    static const AFX_MSGMAP messageMap; \
virtual const AFX_MSGMAP* GetMessageMap() const; 

/*----------------------------------------------------------------------------------------*/
/* 消息映射的入口定义                                                                     */
/*----------------------------------------------------------------------------------------*/
#define BEGIN_MESSAGE_MAP(theClass, baseClass) \
    const AFX_MSGMAP* theClass::GetMessageMap() const \
        { return &theClass::messageMap; } \
        const AFX_MSGMAP theClass::messageMap = \
    { &baseClass::messageMap, &theClass::_messageEntries[0] }; \
    const AFX_MSGMAP_ENTRY theClass::_messageEntries[] = \
    { \
/*----------------------------------------------------------------------------------------*/
/* 消息映射结束                                                                           */
/*----------------------------------------------------------------------------------------*/
#define END_MESSAGE_MAP() \
        {0, 0, AfxSig_end, (AFX_PMSG)0 } \
    }; \

class CApp;

/*----------------------------------------------------------------------------------------*/
/* 定义消息映射函数                                                                       */
/*----------------------------------------------------------------------------------------*/
typedef void (CApp::*AFX_PMSG)(void);


/*----------------------------------------------------------------------------------------*/
/* 消息映射入口定义                                                                       */
/*----------------------------------------------------------------------------------------*/
struct AFX_MSGMAP_ENTRY
{
    WORD        nMessage;               /*消息类型*/
    WORD        nCode;                  /*消息附加的代码,暂时保留*/
    WORD        nSig;                   /*消息对应的入口函数类型*/
    AFX_PMSG    pfn;                    /*消息对应的入口函数*/
} ;
/*----------------------------------------------------------------------------------------*/
/* 任务消息映射定义                                                                       */
/*----------------------------------------------------------------------------------------*/
struct AFX_MSGMAP
{
    const AFX_MSGMAP * pBaseMap;   /*基类的消息映射入口*/
    const AFX_MSGMAP_ENTRY * lpEntries;  /*本应用程序的消息入口*/
};

//消息映射类型定义                                                                       
enum AfxSig
{
    AfxSig_end = 0,     //表示消息映射项的结束
    AfxSig_vv,
    AfxSig_vw,
    AfxSig_vwww,
    AfxSig_vwdw,
    AfxSig_vwdwdw,
    AfxSig_vwdwdwdw,
    AfxSig_vdwdwdww,
    AfxSig_vdwdwdw,
    AfxSig_vdwdw,
    AfxSig_vdw,
    AfxSig_vptrdw,
    AfxSig_vptrdwdw,   

	//控制消息
    AfxSig_vdww,
    AfxSig_vdwww,
    AfxSig_vdwwww,
    AfxSig_vdwwwww,

	//带缓冲区的消息
    AfxSig_vdwwwptrw,
    AfxSig_vdwdwptrw
};

//入口函数类型定义                                                                       
union MessageMapFunctions
{
    AFX_PMSG pfn;   // 通用的映射函数指针
    
    void (CApp::*pfn_vv)(); //void (void)
    void (CApp::*pfn_vw)(WORD);
    void (CApp::*pfn_vwww)(WORD,WORD,WORD);
    void (CApp::*pfn_vwdw)(WORD,DWORD);
    void (CApp::*pfn_vwdwdw)(WORD,DWORD,DWORD);
    void (CApp::*pfn_vwdwdwdw)(WORD,DWORD,DWORD,DWORD);
    void (CApp::*pfn_vdwdwdww)(DWORD,DWORD,DWORD,WORD);
    void (CApp::*pfn_vdwdwdw)(DWORD,DWORD,DWORD);
    void (CApp::*pfn_vdwdw)(DWORD,DWORD);
    void (CApp::*pfn_vptrdw)(PBYTE,DWORD);
    void (CApp::*pfn_vptrdwdw)(PBYTE,DWORD,DWORD);

    //控制消息
    void (CApp::*pfn_vdw)(DWORD);
    void (CApp::*pfn_vdww)(DWORD,WORD);
    void (CApp::*pfn_vdwww)(DWORD,WORD,WORD);
    void (CApp::*pfn_vdwwww)(DWORD,WORD,WORD,WORD);
    void (CApp::*pfn_vdwwwww)(DWORD,WORD,WORD,WORD,WORD);
    
    //带缓冲区的消息
    void (CApp::*pfn_vdwwwptrw)(DWORD,WORD,WORD,PBYTE,WORD);
    void (CApp::*pfn_vdwdwptrw)(DWORD,DWORD,PBYTE,WORD);
};

/*----------------------------------------------------------------------------------------*/
/* 任务基类定义                                                                           */
/*----------------------------------------------------------------------------------------*/
class CApp{
//    DELCEAR_MANAGER(CApp)
private:
    //表示应用程序名称的最大字符个数
    enum {MAX_APPLICATION_NAME=8};
    
    //应用程序名称
    char m_lpszAppName[MAX_APPLICATION_NAME];
    
    //当前正在运行的应用程序
    static CApp *m_pActive;
    DWORD   m_dwTask;               //操作系统分配的任务ID号
    
    //当前任务的执行状态
    DWORD   m_dwTaskMode;

private:
    /*------------------------------------------------------------------------------------------*/
    /* 功能:缺省消息处理函数,当任务收到消息映射未定义的消息时,调用该处理函数                    */
    /* 输入:无                                                                                  */
    /* 输出:无                                                                                  */
    /* 返回:无                                                                                  */
    /*------------------------------------------------------------------------------------------*/
    void OnDefault(){}
    /*------------------------------------------------------------------------------------------*/
    /* 功能:设置当前运行的应用程序指针                                                          */
    /* 输入:无                                                                                  */
    /* 输出:无                                                                                  */
    /* 返回:无                                                                                  */
    /*------------------------------------------------------------------------------------------*/
    void    OnAvtive() {m_pActive = this;}
protected:
    DECLARE_MESSAGE_MAP()   
    DWORD   AppID;              //任务内部ID号
    BYTE    *m_pMsgBuf;
    DWORD   m_nMsgLen;
protected:
    /*------------------------------------------------------------------------------------------*/
    /* 功能:任务消息调度函数，根据接收的消息，自动调度相应的消息处理函数                        */
    /* 输入:msg：任务接收到的消息                                                               */
    /* 输出:无                                                                                  */
    /* 返回:无                                                                                  */
    /*------------------------------------------------------------------------------------------*/
    void  Dispatch(const TMessage *msg); 

    /*------------------------------------------------------------------------------------------*/
    /* 功能:设置任务定时器                                                                      */
    /* 输入:sign:给定的定时器标识;interval:定时间隔的毫秒数;func:该定时时刻到,需要自动调用的函数*/
    /*      指针,如果函数指针为NULL,系统调用OnTimer函数                                         */
    /* 输出:无                                                                                  */
    /* 返回:成功返回TRUE,失败返回FALSE                                                          */
    /*------------------------------------------------------------------------------------------*/
    DWORD SetTimer(DWORD sign,DWORD interval,TSysTime* pBeginTime=NULL)
    {
        return ::OS_SetTimer((OSINT8)m_dwTask,(OSINT8)sign,(OSINT16)interval, pBeginTime);
    }
    
    /*------------------------------------------------------------------------------------------*/
    /* 功能:取消任务定时器                                                                      */
    /* 输入:sign 要求取消的定时器的标识                                                         */
    /* 输出:无                                                                                  */
    /* 返回:成功返回TRUE,失败返回FALSE                                                          */
    /*------------------------------------------------------------------------------------------*/
    DWORD KillTimer(DWORD sign)
    {
        return ::OS_DelTimer((OSINT8)m_dwTask, (OSINT8)sign);
    }                        

    /*------------------------------------------------------------------------------------------*/
    /* 功能:任务进入保护状态,禁止高优先级任务抢占                                               */
    /* 输入:无                                                                                  */
    /* 输出:无                                                                                  */
    /* 返回:无                                                                                  */
    /*------------------------------------------------------------------------------------------*/
    void Lock() 
    {
        ::OS_Protect((OSINT8)m_dwTask);
    }

    /*------------------------------------------------------------------------------------------*/
    /* 功能:恢复任务执行状态到允许抢占模式                                                      */
    /* 输入:无                                                                                  */
    /* 输出:无                                                                                  */
    /* 返回:无                                                                                  */
    /*------------------------------------------------------------------------------------------*/
    void UnLock() 
    {
        ::OS_UnProtect((OSINT8)m_dwTask);
    }

    /*------------------------------------------------------------------------------------------*/
    /* 功能:任务一段时间                                                                        */
    /* 输入:msec 需要睡眠的毫秒数                                                               */
    /* 输出:无                                                                                  */
    /* 返回:ERR_SUCCESS 执行成功;否则执行失败                                                                               */
    /*------------------------------------------------------------------------------------------*/
    void Sleep(DWORD msec) 
    {
        ::OS_Sleep((OSINT16)msec);
    }

public:

    /*------------------------------------------------------------------------------------------*/
    /* 功能:任务基类构造函数                                                                    */
    /* 输入:app 任务号;msglen 任务数据交换区的长度                                              */
    /* 输出:无                                                                                  */
    /* 返回:无                                                                                  */
    /*------------------------------------------------------------------------------------------*/
    CApp(DWORD *pAppId);
    
    ~CApp()
    {
        if(m_nMsgLen != 0)
            delete m_pMsgBuf;
    }
    /*------------------------------------------------------------------------------------------*/
    /* 功能:任务的消息循环处理,该函数一般没有返回,除非该任务被删除                              */
    /* 输入:无                                                                                  */
    /* 输出:无                                                                                  */
    /* 返回:无                                                                                  */
    /*------------------------------------------------------------------------------------------*/
    void   Run();    

    /*------------------------------------------------------------------------------------------*/
    /* 功能:从任务挂起状态恢复到任务正常运行状态                                                */
    /* 输入:无                                                                                  */
    /* 输出:无                                                                                  */
    /* 返回:ERR_SUCCESS 调用成功;其它,系统调用失败                                              */
    /*------------------------------------------------------------------------------------------*/
    DWORD Resume() {return ::OS_Resume((OSINT8)m_dwTask);} 

    /*------------------------------------------------------------------------------------------*/
    /* 功能:挂起该任务                                                                          */
    /* 输入:无                                                                                  */
    /* 输出:无                                                                                  */
    /* 返回:ERR_SUCCESS 调用成功;其它,系统调用失败                                              */
    /*------------------------------------------------------------------------------------------*/
    DWORD Suspend() {return ::OS_Suspend((OSINT8)m_dwTask);}

    /*------------------------------------------------------------------------------------------*/
    /* 功能:删除该运行任务                                                                      */
    /* 输入:无                                                                                  */
    /* 输出:无                                                                                  */
    /* 返回:ERR_SUCCESS 调用成功;其它,系统调用失败                                              */
    /*------------------------------------------------------------------------------------------*/
    DWORD Kill() {return ::OS_Kill((OSINT8)m_dwTask);}

    /*------------------------------------------------------------------------------------------*/
    /* 功能:获取当前正在运行的应用程序指针                                                      */
    /* 输入:无                                                                                  */
    /* 输出:无                                                                                  */
    /* 返回:无                                                                                  */
    /*------------------------------------------------------------------------------------------*/
    static CApp* GetActive() {return m_pActive;}

    /*------------------------------------------------------------------------------------------*/
    /* 功能:获取当前的应用程序名称                                                              */
    /* 输入:无                                                                                  */
    /* 输出:无                                                                                  */
    /* 返回:无                                                                                  */
    /*------------------------------------------------------------------------------------------*/
    const char *GetAppName() const {return m_lpszAppName;}
    
    DWORD GetTaskId() {return m_dwTask;}
};

const AFX_MSGMAP_ENTRY* FindMessageEntry(const AFX_MSGMAP_ENTRY* lpEntry, WORD nMsg, WORD nCode);


#endif
